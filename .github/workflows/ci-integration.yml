name: CI Integración (docker-compose)

on:
  push:
    branches: [ "main" ]
    paths:
      - "Sales-System/**"
      - ".github/workflows/ci-integration.yml"
  pull_request:
    branches: [ "main" ]
    paths:
      - "Sales-System/**"
      - ".github/workflows/ci-integration.yml"

jobs:
  compose-test:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    env:
      COMPOSE_FILE: Sales-System/docker-compose.yml

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ⚠️ Nada de apt-get. Primero intentamos usar docker compose del runner;
      # si falta, instalamos el plugin en ~/.docker/cli-plugins/
      - name: Verificar/instalar Docker Compose v2 si hiciera falta
        shell: bash
        run: |
          set -e
          if docker compose version >/dev/null 2>&1; then
            echo "docker compose ya disponible"
          else
            echo "Instalando plugin docker compose v2 en ~/.docker/cli-plugins/ ..."
            mkdir -p ~/.docker/cli-plugins
            curl -L "https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-linux-x86_64" \
              -o ~/.docker/cli-plugins/docker-compose
            chmod +x ~/.docker/cli-plugins/docker-compose
            docker compose version
          fi

      - name: Build imágenes locales
        run: docker compose -f "$COMPOSE_FILE" build

      - name: Levantar stack
        run: docker compose -f "$COMPOSE_FILE" up -d

      # Espera a que los puertos estén abiertos (MySQL + 4 servicios Spring)
      - name: Esperar puertos (3306, 8081-8084)
        shell: bash
        run: |
          set -e
          for port in 3306 8081 8082 8083 8084; do
            echo "Esperando puerto $port..."
            for i in {1..60}; do
              if (echo > /dev/tcp/127.0.0.1/$port) >/dev/null 2>&1; then
                echo "Puerto $port OK"; break
              fi
              sleep 5
            done
          done

      # Prueba /actuator/health si está habilitado; si no, prueba "/"
      - name: Smoke tests HTTP
        shell: bash
        run: |
          set -e
          test_url () { curl -fsS "$1" >/dev/null 2>&1; }
          hit () {
            local base=$1
            if test_url "$base/actuator/health"; then
              echo "$base/actuator/health OK"
            elif test_url "$base/"; then
              echo "$base/ OK"
            else
              echo "Falla $base" && return 1
            fi
          }
          hit http://localhost:8081
          hit http://localhost:8082
          hit http://localhost:8083
          hit http://localhost:8084

      - name: Logs (si falla)
        if: failure()
        run: docker compose -f "$COMPOSE_FILE" logs --no-color > compose-logs.txt || true

      - name: Artefacto logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compose-logs
          path: compose-logs.txt

      - name: Down
        if: always()
        run: docker compose -f "$COMPOSE_FILE" down -v
